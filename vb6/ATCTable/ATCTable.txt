Option Explicit

'Open the specified file, probably read at least the metadata about fields
Public Function OpenFile(ByVal filename As String) As clsATCTable

'Write the current table to the specified file
Public Sub WriteFile(ByVal filename As String)

'Forget the current contents of the table
Public Sub ClearData()

'Forget the current contents of the table and the fields
Public Sub Clear()

'The number of records (rows) in the table
Public Property Get NumRecords() As Long
Public Property Let NumRecords(ByVal newValue As Long)

'The number of fields (columns) in the table
Public Property Get NumFields() As Long
Public Property Let NumFields(ByVal aNewValue As Long)

'The current record index [1..NumRecords]
Public Property Get CurrentRecord() As Long
Public Property Let CurrentRecord(ByVal newValue As Long)

'The value of the specified field in the current record
'aFieldNumber [1..NumFields]
Public Property Get Value(ByVal aFieldNumber As Long) As String
Public Property Let Value(ByVal aFieldNumber As Long, ByVal newValue As String)

'Returns True if CurrentRecord is at beginning of table
Public Function BOF() As Boolean 'If pCurrentRecord <= 1 Then BOF = True

'Returns True if CurrentRecord is at end of table
Public Function EOF() As Boolean 'If pCurrentRecord >= NumRecords Then EOF = True

'Moves CurrentRecord to the beginning of the table
Public Sub MoveFirst() 'CurrentRecord = 1

'Moves CurrentRecord to the end of the table
Public Sub MoveLast()  'CurrentRecord = NumRecords

'Moves CurrentRecord to the next record
Public Sub MoveNext()  'CurrentRecord = CurrentRecord + 1

'Moves CurrentRecord to the next record
Public Sub MovePrevious() 'CurrentRecord = CurrentRecord - 1

'Returns a text description of the table
Public Function Summary(Optional aFormat As String = "tab,headers,expandtype") As String
'  Summary = SummaryFile(aFormat) & vbCrLf & SummaryFields(aFormat)

Public Function SummaryFile(Optional aFormat As String = "tab,headers") As String

Public Function SummaryFields(Optional aFormat As String = "tab,headers,expandtype") As String

'Returns VB source code to create this table
Public Function CreationCode() As String

'Returns a new table with the same fields as this one, but no data
Public Function Cousin() As clsATCTable

'Returns the name of the specified field, aFieldNumber should be in [1..numFields]
Public Property Get FieldName(ByVal aFieldNumber As Long) As String
Public Property Let FieldName(ByVal aFieldNumber As Long, ByVal aNewValue As String)

'Returns the number of the field with the specified name
'Returns zero if the named field does not appear in this file
Public Function FieldNumber(ByVal aFieldName As String) As Long

'Returns the width of the specified field
Public Property Get FieldLength(ByVal aFieldNumber As Long) As Long
Public Property Let FieldLength(ByVal aFieldNumber As Long, ByVal newValue As Long)

'Returns the type of the specified field
'for DBF: C = Character, D = Date, N = Numeric, L = Logical, M = Memo
Public Property Get FieldType(ByVal aFieldNumber As Long) As String
Public Property Let FieldType(ByVal aFieldNumber As Long, ByVal aNewValue As String)

'Returns the name of the file used to populate the table
Public Property Get filename() As String

'Returns a string version of the current record
Private Function CurrentRecordAsDelimitedString(Optional aDelimiter As String = ",", _
                                                Optional aQuote As String = "") As String

'Returns True if found, moves CurrentRecord to first record with .Value(aFieldNumber) = aFindValue
'If not found, returns False and moves CurrentRecord to aStartRecord
'If aStartRecord is specified, searching starts there instead of at first record
'If aEndRecord is specified, search stops at aEndRecord
Public Function FindFirst(ByVal aFieldNumber As Long, aFindValue As String, _
                     Optional ByVal aStartRecord As Long = 1, _
                     Optional ByVal aEndRecord As Long = -1) As Boolean

'Returns True if found, moves CurrentRecord to next record with .Value(FieldNumber) = FindValue
'If not found, returns False and moves CurrentRecord to 1
Public Function FindNext(ByVal aFieldNumber As Long, aFindValue As String) As Boolean
'  FindNext = FindFirst(aFieldNumber, aFindValue, pCurrentRecord + 1)

'FindLast     (like FindFirst but searching from end to start)
'FindPrevious (like FindNext but searching from current to 1)

''Merge records from table2Add into this table
''keyFieldNames are field names that define a unique field.
''If keyFieldNames is blank, no duplicate checking will occur
''If keyFieldNames(1) = "**ALL**" then the entire record will be used as a key
''DuplicateAction dictates handling of duplicate records as follows:
'' 0 - duplicates allowed
'' 1 - keep existing instance of duplicates and discard duplicates from dbf being added
'' 2 - replace existing instance of duplicates with duplicates from dbf being added
'' 3 - ask user what to do (not currently implemented)
'Public Sub Merge(table2Add As clsATCTable, keyFieldNames() As String, DuplicateAction As Long)
''
'
''Returns True if CurrentRecord matches FindValue
'Public Function MatchRecord(ByRef FindValue() As Byte) As Boolean
''
'Public Property Set Logger(ByVal newValue As Object)
