Option Explicit

Private pFile As ATCclsTserFile
Private pValues() As Single
Private pFlags() As Long
Private pHeader As ATTimSerDataHeader
Private pDates As ATCclsTserDate
Private pDtran As Long

Private pMin As Double
Private pMax As Double
Private pMean As Double
Private pGeometricMean As Double
Private pSum As Double
Private pStdDeviation As Double
Private pVariance As Double

Private pAttributes As Collection
Private pErrorDescription As String
Private pSerial As Long
Private pNeedSummaryRecalc As Boolean

Private pHeaderComplete As Boolean
Private pHeaderOnly As Boolean

Public Type ATTimSerAttribute
  Name As String
  Value As String
  Definition As ATCclsAttributeDefinition
End Type

Public Enum ATCTran
  TranAverSame = 0
  TranSumDiv = 1
  TranMax = 2
  TranMin = 3
  TranNative = 4
End Enum

Public Enum ATCTimeUnit
  TUSecond = 1
  TUMinute = 2
  TUHour = 3
  TUDay = 4
  TUMonth = 5
  TUYear = 6
  TUCentury = 7
End Enum

Public Sub Dump(Optional l& = 1)
' Print a summary of the timeseries to the immediate window for debugging

Public Function AddRemoveDates(sjdate As Double, _
' Returns a new ATCclsTserData based on this one with values added and/or _
 removed to fit the specified start and end date
' sjdate Starting Julian Date
' ejdate Ending Julian Date
' NewValueOption _
 0:All new values are set to NewValue<br> _
 1:new values are set to closest value that exists already (NewValue is ignored)<br> _
 2:new values are interpolated from closest value that exists to NewValue<br> _
 3:new values are copied from existing values starting at _index_ NewValue
' newValue See explanation of NewValueOption


Public Sub AttribSet(AttrName As String, AttrValue As String, Optional AttrDef As ATCclsAttributeDefinition)
' Set value of the named attribute to the specified value.
'##PARAM AttrDef Reference to attribute defintion for value checking.
'##PARAM AttrValue New value of attribute
'##PARAM AttrName Name of attribute being set.

Public Property Get Attrib(AttrName As String, Optional AttrDefault As String = "") As String
' Gets text value by name from Attribs collection or from several _
 other "attribute-like" values stored in different parts of the class.
'##PARAM AttrDefault Default value for attribute. Returned if _
 value is not set.
'##PARAM AttrName Name of attribute to get value for.
ErrHand:

Public Property Get AttribNumeric(AttrName As String, Optional AttrDefault As Long = 0) As Double
' Gets&nbsp;numeric value by name from Attribs collection or _
 from several other "attribute-like" values stored in different _
 parts of the class.
'##PARAM AttrName Name of attribute to get value for.
'##PARAM AttrDefault Default value of attribute.  Returned if attribute not available.

Public Property Get AttribNames() As Collection
' Gets collection of attribute&nbsp;names available in the _
 timeseries


' Collection of available attributes in timeseries
Public Property Set Attribs(newV As Collection) ' of ATCData.ATTimSerAttribute
Public Property Get Attribs() As Collection ' of ATCData.ATTimSerAttribute

Public Sub calcSummary()
' Calculate summary information about timeseries (mean, variance, _
 min, max, etc).

ErrHandler:

' Dates present on timeseries.
Public Property Set Dates(newV As ATCData.ATCclsTserDate)
Public Property Get Dates() As ATCclsTserDate

' Text description of most recent error.
Public Property Let ErrorDescription(newError$)
Public Property Get ErrorDescription() As String

' Timeseries file object containing this timeseries.
Public Property Set File(newFile As ATCData.ATCclsTserFile)
Public Property Get File() As ATCclsTserFile

Public Property Get Flag(index As Long) As Long
' Get value of a flag associated with a specific date/value _
 pair.

' Flags for this timeseries.
Public Property Let flags(newFlags() As Long)
Public Property Get flags() As Long()

' Header for this timesereies.
Public Property Set Header(newHeader As ATCData.ATTimSerDataHeader)
Public Property Get Header() As ATCData.ATTimSerDataHeader

' Serial number assigned in order of creation. Guaranteed _
 to be unique at runtime but will be different from one run to another
Public Property Get Serial() As Long

'Public Property Let Summary(newV As ATCData.ATTimSerDataSummary)
'  pSummary = newV
''Public Property Get Summary() As ATCData.ATTimSerDataSummary
'  If DataNotRead Then Call pFile.readData(Me)
'  Summary = pSummary
'
' Data transformation.
Public Property Let Dtran(newV As Long)
Public Property Get Dtran() As Long

' Mimimum value in timseries
Public Property Let Min(newV As Single)
Public Property Get Min() As Single

' Maximum value in timeseries
Public Property Let Max(newV As Single)
Public Property Get Max() As Single

' Mean value in timeseries
Public Property Let Mean(newV As Single)
Public Property Get Mean() As Single

' Geometric mean value in timeseries
Public Property Let GeometricMean(newV As Single)
Public Property Get GeometricMean() As Single

' Summation of values in timeseries
Public Property Let Sum(newV As Single)
Public Property Get Sum() As Single

' Variance of values in timeseries
Public Property Let Variance(newV As Single)
Public Property Get Variance() As Single

' Standard deviation of values in timeseries
Public Property Let StdDeviation(newV As Single)
Public Property Get StdDeviation() As Single

' Data value in timeseries at specified index
Public Property Get Value(index As Long) As Single
Public Property Let Value(index As Long, newValue As Single)

' Array of values in timeseries
Public Property Let Values(newValues() As Single)
Public Property Get Values() As Single()

' Returns a new ATCclsTserData containing data between specified julian dates
' s Starting Julian Date
' e Ending Julian Date
Public Function SubSetByDate(S As Double, e As Double) As ATCclsTserData

' Returns a new ATCclsTserData containing data generated from the table provided
' rangeTop contains an array of the top values in a range of _
values to be converted. Values must appear in ascending order -- rangeTop(i) < rangeTop(i+1)
' newValue contains the new values for data in the corresponding _
range.  Values larger than rangeTop(n) will remain unchanged in the new time series
' Interpolate interpolation flag<br> _
if False, for each range defined in rangeTop(i), _
all values will be set to newValue(i)<br> _
if True, values in each range will be interpolated between newValue(i-1) and newValue(i) _
values in the first range will be assigned to newValue(1) without interpolation
Public Function doTable(rangeTop() As Single, newValue() As Single, Interpolate As Boolean) As ATCclsTserData

SetDate:


' Returns a new ATCclsTserData containing data generated using the supplied math function and parameters
Public Function doMath(oper As ATCOperatorType, ts2 As ATCclsTserData, Optional x As Double = 0, Optional X2 As Double = 0) As ATCclsTserData


Public Function Copy() As ATCclsTserData
' Returns a copy of this timeseries.

Public Function doDateCheck(d1 As ATCclsTserDate, d2 As ATCclsTserDate) As Boolean
' Checks to see if two instances of ATCclsTserDate are equivalent.


' Returns a new timeseries based on an existing _
timeseries object (ATCclsTserData containing "old" values and _
dates) and a "new" set of dates (ATCclsTserDate). All header and _
attribute information of the original timeseries is copied to the _
new timeseries.<p> _
For new dates occurring before the first old date, the first old _
value is used without interpolation. Similarly for new dates after _
the last old date, the last old value is used without interpolation. _
In between, each new value is calculated by linear interpolation _
between the closest old value before and the closest old value _
after each new date.
Public Function Interpolate(ds As ATCclsTserDate) As ATCclsTserData

' Returns a new ATCclsTserData aggregated based on the input _
 parameters.
Public Function Aggregate(ds As ATCclsTserDate, Tran As ATCTran) As ATCclsTserData
'##PARAM Tran Transformation function
'##PARAM ds Date class containing new dates


' Fill values in timeseries with specified value.
Public Function FillValues(ByVal ts As Long, ByVal Tu As ATCTimeUnit, ByVal FillVal As Single, ByVal MissingVal As Single, AccumVal As Single) As ATCclsTserData
'##PARAM AccumVal Value indicating accumulated data.
'##PARAM MissingVal Value indicating missing data.
'##PARAM FillVal Value to Fill with.
'##PARAM Tu Time units.
'##PARAM ts Timestep in units of TU.</P>

' FillMissing fills existing missing values in a time series.
Public Function FillMissing(FillMethod As String, MaxNMis As Long, MVal As Single) As ATCclsTserData
'##PARAM MVal Value already in data that indicates a missing value.
'##PARAM MaxNMis if more than this many values in a row are missing, _
 do not fill
'##PARAM FillMethod <P>valid values:<BR>INTERPOLATE - between valid _
 values around missing<BR>AVERAGE - between valid values around missing<BR>LAST _
 - fill with last valid value<BR>NEXT - fill with next valid value


' Compare this timeseries to the specified one&nbsp; Returns _
 True if a match.
Public Function Compare(nTs As ATCclsTserData) As Boolean
'##PARAM nTs Timeseries to compare against.

Private Function DataNotRead() As Boolean

---------------------------------------------------------
ATTimSerDataHeader

Private pDesc As String ' description
Private pId As Double    'identifier
Private pSen As String   'scnenario name
Private pLoc As String   'location name
Private pCon As String   'constituent name
  
' Text description of timeseries
Public Property Get Desc() As String
Public Property Let Desc(newValue As String)

' Identifier for timeseries (dsn if available).
Public Property Get ID() As Double
Public Property Let ID(newValue As Double)

' Scenario name
Public Property Get Sen() As String
Public Property Let Sen(newValue As String)

' Location name
Public Property Get Loc() As String
Public Property Let Loc(newValue As String)

' Constituent name
Public Property Get Con() As String
Public Property Let Con(newValue As String)

' Copy of this header
Public Function Copy() As ATTimSerDataHeader

' Compare this header with another
Public Function Compare(nTsHeader As ATTimSerDataHeader) As Boolean
