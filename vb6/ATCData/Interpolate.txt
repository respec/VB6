Interpolate computes a new timeseries based on an existing
timeseries object (ATCclsTserData containing "old" values and
dates) and a "new" set of dates (ATCclsTserDate). All header and
attribute information of the original timeseries is copied to the
new timeseries.

For new dates occurring before the first old date, the first old
value is used without interpolation. Similarly for new dates after
the last old date, the last old value is used without interpolation.
In between, each new value is calculated by linear interpolation
between the closest old value before and the closest old value
after each new date. 

The core line of code reads:

If dateNew > dateOld2 Or oldIndex = 1 Then
  newVals(newIndex) = valOld2
Else
  newVals(newIndex) = 
    valOld1 + (dateNew - dateOld1) * (valOld2 - valOld1)
                                   / (dateOld2 - dateOld1)
End If

Old indicates dates and values from the original data set, 1 is
the data point chronogically just before dateNew and 2 is the data
point at or just after dateNew.

This process is straightforward for instantaneous measurements
(non-constant interval data).

For both old and new dates, if a set of dates is constant interval
data, the times used for interpolation are at the end of each
interval. For daily data, the instant used is midnight, 24 hours
after the day starts. Monthly and yearly values are often treated
as constant interval even though months and years are actually not
constant intervals. For monthly or yearly dates, the instant used
is midnight of the last day of the month or year.


Aggregate is similar to Interpolate.
Aggregate computes a new timeseries based on an existing
timeseries object (ATCclsTserData containing "old" values and
dates) and a "new" set of dates (ATCclsTserDate). All header and
attribute information of the original timeseries is copied to the
new timeseries.

Aggregating Max and Min are fairly straightforward. If there are
no old values in a new interval, Max will be -1E+30 and Min will
be 1E+30 for that new interval.

For Aver/Same and Sum/Div, the algorithm is a little more
complicated. For each overlapping portion of a new and and old
interval, overlapStart and overlapEnd are set to the instant the
overlap begins and ends. Every instant in both the old and new
dates will be both the end of one overlap and the start of
another. 

Aver/Same:

fraction = (overlapEnd - overlapStart) / (dateNew - prevDateNew)
newVals(newIndex) = newVals(newIndex) + valOld * fraction

Sum/Div:

fraction = (overlapEnd - overlapStart) / (dateOld - prevDateOld)
newVals(newIndex) = newVals(newIndex) + valOld * fraction
          
